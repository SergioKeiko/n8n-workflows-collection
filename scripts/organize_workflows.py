#!/usr/bin/env python3
"""
N8N Workflow Organizer - Simple Version
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ macOS
Created by: Sergey
"""

import os
import json
import shutil
from pathlib import Path
from collections import defaultdict

def organize_workflows():
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç workflows –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ N8N workflows...")
    print("=" * 50)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    categories = {
        "ai-automation": [
            "openai", "chatgpt", "claude", "ai", "gpt", "llm", "langchain", 
            "chatbot", "bot", "artificial", "intelligence", "machine", "learning"
        ],
        "crm-sales": [
            "hubspot", "salesforce", "pipedrive", "crm", "lead", "sales", 
            "deal", "contact", "customer", "prospect", "zoho", "bitrix"
        ],
        "email-marketing": [
            "mailchimp", "activecampaign", "sendgrid", "email", "newsletter", 
            "campaign", "brevo", "klaviyo", "getresponse", "convertkit", "mail"
        ],
        "social-media": [
            "facebook", "twitter", "instagram", "linkedin", "tiktok", 
            "youtube", "telegram", "whatsapp", "discord", "slack", "social"
        ],
        "data-processing": [
            "sheets", "excel", "csv", "airtable", "notion", "database", 
            "mysql", "postgres", "mongodb", "redis", "transform", "data"
        ],
        "integrations": [
            "webhook", "api", "rest", "graphql", "zapier", "make", 
            "http", "integration", "connect", "sync"
        ],
        "monitoring": [
            "monitor", "alert", "notification", "ping", "uptime", 
            "error", "log", "tracking", "report", "status"
        ],
        "ecommerce": [
            "shopify", "woocommerce", "stripe", "paypal", "payment", 
            "order", "product", "inventory", "ecommerce", "store", "shop"
        ],
        "productivity": [
            "task", "todo", "calendar", "scheduler", "timer", "reminder", 
            "project", "trello", "asana", "monday", "workflow", "time"
        ],
        "restaurant-business": [
            "restaurant", "food", "delivery", "menu", "order", "kitchen", 
            "reservation", "cafe", "horeca", "pos", "table", "cook"
        ]
    }
    
    source_dir = Path("workflows")
    target_dir = Path("organized_workflows")
    
    if not source_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    json_files = list(source_dir.glob("*.json"))
    
    if not json_files:
        print("‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ workflows/")
        return False
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    print()
    
    stats = defaultdict(int)
    processed_count = 0
    
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                workflow_data = json.load(f)
            
            analysis_text = ""
            analysis_text += json_file.name.lower() + " "
            
            if 'name' in workflow_data:
                analysis_text += workflow_data['name'].lower() + " "
            
            if 'nodes' in workflow_data:
                for node in workflow_data['nodes']:
                    if 'type' in node:
                        analysis_text += node['type'].lower() + " "
                    if 'parameters' in node:
                        analysis_text += str(node['parameters']).lower() + " "
            
            category_scores = defaultdict(int)
            for category, keywords in categories.items():
                for keyword in keywords:
                    if keyword in analysis_text:
                        category_scores[category] += 1
            
            if category_scores:
                category = max(category_scores, key=category_scores.get)
            else:
                category = "uncategorized"
            
            target_category_dir = target_dir / category
            target_file = target_category_dir / json_file.name
            
            target_category_dir.mkdir(parents=True, exist_ok=True)
            shutil.copy2(json_file, target_file)
            stats[category] += 1
            processed_count += 1
            
            if processed_count % 200 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{len(json_files)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {json_file.name}: {e}")
            try:
                target_category_dir = target_dir / "uncategorized"
                target_category_dir.mkdir(parents=True, exist_ok=True)
                target_file = target_category_dir / json_file.name
                shutil.copy2(json_file, target_file)
                stats["uncategorized"] += 1
            except:
                pass
    
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
    print("="*60)
    
    total = sum(stats.values())
    sorted_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)
    
    emojis = {
        "ai-automation": "ü§ñ", "crm-sales": "üíº", "email-marketing": "üìß",
        "social-media": "üì±", "data-processing": "üìä", "integrations": "üîó",
        "monitoring": "üìà", "ecommerce": "üõí", "productivity": "‚ö°",
        "restaurant-business": "üçï", "my-workflows": "üíé", "uncategorized": "üìÅ"
    }
    
    for category, count in sorted_stats:
        percentage = (count / total) * 100 if total > 0 else 0
        emoji = emojis.get(category, "üìÑ")
        print(f"{emoji} {category:22} {count:4} —Ñ–∞–π–ª–æ–≤ ({percentage:.1f}%)")
    
    print(f"\nüéØ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total} —Ñ–∞–π–ª–æ–≤")
    print(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    create_readme(stats, emojis)
    return True

def create_readme(stats, emojis):
    readme_content = f"""# üöÄ My N8N Workflows Collection

> **–ê–≤—Ç–æ—Ä:** Sergey - Marketing Automation & No-Code Specialist  
> **Upwork:** [https://www.upwork.com/fl/~017d2e8eb206e2c1ac](https://www.upwork.com/fl/~017d2e8eb206e2c1ac)

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

**–í—Å–µ–≥–æ workflows:** {sum(stats.values())}

### –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

"""
    
    sorted_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)
    
    for category, count in sorted_stats:
        emoji = emojis.get(category, "üìÑ")
        readme_content += f"- {emoji} **{category}**: {count} workflows\n"
    
    readme_content += """

## üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ø–∞–ø–∫–µ `organized_workflows/`
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π workflow (JSON —Ñ–∞–π–ª)
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ n8n —á–µ—Ä–µ–∑ –º–µ–Ω—é Import workflow
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

## üéØ –î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è `restaurant-business/` —Å–æ–¥–µ—Ä–∂–∏—Ç workflows –¥–ª—è:
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π  
- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∫–ª–∏–µ–Ω—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å POS —Å–∏—Å—Ç–µ–º–∞–º–∏

---

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ*
"""
    
    readme_path = Path("organized_workflows/README.md")
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {readme_path}")

if __name__ == "__main__":
    success = organize_workflows()
    
    if success:
        print("\nüåü –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É organized_workflows/")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É organized_workflows/")
        print("   2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        print("   3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ workflow –≤ n8n")
        print("   4. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ workflows –≤ my-workflows/")
    else:
        print("\n‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
